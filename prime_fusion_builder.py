"""
Stochastic Prime Fusion Simulation

This program models a hypothetical fusion process inspired by nuclear fusion and prime numbers.
The goal is to explore the behavior of a fusion-like system, where elementary particles (represented by prime numbers)
combine in a stochastic manner to produce higher-order primes. Fusion rules govern which prime pairs can combine, 
and the resulting "fusion products" are constrained by both the primes involved and a Gaussian-weighted selection, 
favoring specific fusion pathways while allowing for stochastic variation. 

Core Components:
1. **Prime Inventory**: An initial stock of "p1" particles (representing the smallest prime, 2) initiates the fusion. 
   This stock is supplemented by additional "p1" particles each time a fusion succeeds.
   
2. **Fusion Rules**: Each fusion rule describes how two primes combine to form a third prime, sometimes with a byproduct.
   Rules are derived from a structured pattern, where each prime-pair fusion must meet specific gap and combination criteria.
   This results in a deterministic yet complex sequence, progressing from lower primes to higher primes, emulating 
   a sequence similar to nuclear fusion processes in stars. 

3. **Gaussian-weighted Fusion**: Fusion steps are not purely random; instead, the rule selection follows a Gaussian 
   distribution centered on a preferred "target" prime. This models real-world fusion probability, where fusion likelihood 
   depends on particle masses. Here, primes closer to the central fusion target have a higher likelihood of being selected.

4. **Stochastic Process**: The primary loop runs a specified number of fusion steps. In each step, an attempt is made to 
   apply a weighted fusion rule. If successful, inventory counts are updated; otherwise, the system attempts another fusion. 
   Successful fusions add one new "p1" particle to simulate continuous particle availability and encourage new reactions.

5. **Output**: After the simulation completes the specified number of fusion steps, the program outputs the final inventory 
   of primes, showing the distribution of "fusion products" generated by the stochastic prime fusion process.

By incorporating Gaussian-weighted selection and a carefully structured fusion rule set, this program provides insights 
into a complex fusion network governed by prime numbers, where order emerges from stochastic interactions within specific rules.
"""



import random
import numpy as np

def stochastic_prime_fusion(step_count, primes):
    # Initialize empty inventory for primes and add initial p1 stock
    fusion_counts = {name: 0 for name in primes}
    fusion_counts["p1"] = step_count  # Start with at least one p1 to initiate fusion

    # Define fusion rules with target primes up to p82
    fusion_rules = [
            (('p1', 'p1'), 'p2', None),         # 1-H
            (('p2', 'p1'), 'p3', None),         # 2-H, 2-He
            (('p3', 'p1'), 'p4', None),         # 3-H, 3-He
            (('p4', 'p3'), 'p5', 'p2'),         # 4-H, 4-He, 4-Li
            (('p5', 'p1'), 'p6', None),         # 5-H, 5-He, 5-Li, 5-Be
            (('p6', 'p3'), 'p7', 'p2'),         # 6-H, 6-He, 6-Li, 6-Be
            (('p7', 'p1'), 'p8', None),         # 7-He, 7-Li, 7-Be, 7-B
            (('p8', 'p3'), 'p9', 'p2'),         # 8-He, 8-Li, 8-Be, 8-B, 8-C 
            (('p9', 'p4'), 'p10', 'p3'),        # 9-He, 9-Li, 9-Be, 9-B, 9-C
            (('p10', 'p1'), 'p11', None),       # 10-He, 10-Li, 10-Be, 10-B, 10-C, 10-N
            (('p11', 'p4'), 'p12', 'p3'),       # 11-Li, 11-Be, 11-B, 11-C, 11-N, 
            (('p12', 'p3'), 'p13', 'p2'),       # 12-Li, 12-Be, 12-B, 12-C, 12-N, 12-O
            (('p13', 'p1'), 'p14', None),       # 13-Be, 13-B, 13-C, 13-N, 13-O
            (('p14', 'p3'), 'p15', 'p2'),       # 14-Be, 14-B, 14-C, 14-N, 14-O, 14-F
            (('p15', 'p4'), 'p16', 'p3'),       # 15-B, 15-C, 15-N, 15-O, 15-F
            (('p16', 'p4'), 'p17', 'p3'),       # 16-B, 16-C, 16-N, 16-O, 16-F, 16-Ne
            (('p17', 'p1'), 'p18', None),       # 17-B, 17-C, 17-N, 17-O, 17-F, 17-Ne
            (('p18', 'p4'), 'p19', 'p3'),       # 18-B, 18-C, 18-O, 18-F, 18-Ne, 18-Na
            (('p19', 'p3'), 'p20', 'p2'),       # 19-B, 19-C, 19-N, 19-O, 19-F, 19-Ne, 19-Na
            (('p20', 'p1'), 'p21', None),       # 20-C, 20-N, 20-O, 20-F, 20-Ne, 20-Na, 20-Mg
            (('p21', 'p4'), 'p22', 'p3'),       # 21-C, 21-N, 21-O, 21-F, 21-Ne, 21-Na, 21-Mg, 21-Al
            (('p22', 'p3'), 'p23', 'p2'),       # 22-C, 22-N, 22-O, 22-F, 22-Ne, 22-Na, 22-Mg, 22-Al, 22-Si
            (('p23', 'p4'), 'p24', 'p3'),       # 23-N, 23-O, 23-F, 23-Ne, 23-Na, 23-Mg, 23-Al, 23-Si
            (('p24', 'p5'), 'p25', 'p4'),
            (('p25', 'p3'), 'p26', 'p2'),
            (('p26', 'p1'), 'p27', None),
            (('p27', 'p3'), 'p28', 'p2'),
            (('p28', 'p1'), 'p29', None),
            (('p29', 'p3'), 'p30', 'p2'),
            (('p30', 'p7'), 'p31', 'p6'),
            (('p31', 'p3'), 'p32', 'p2'),
            (('p32', 'p4'), 'p33', 'p3'),
            (('p33', 'p1'), 'p34', None),
            (('p34', 'p5'), 'p35', 'p4'),
            (('p35', 'p1'), 'p36', None),
            (('p36', 'p4'), 'p37', 'p3'),
            (('p37', 'p4'), 'p38', 'p3'),
            (('p38', 'p3'), 'p39', 'p2'),
            (('p39', 'p4'), 'p40', 'p3'),
            (('p40', 'p4'), 'p41', 'p3'),
            (('p41', 'p1'), 'p42', None),
            (('p42', 'p5'), 'p43', 'p4'),
            (('p43', 'p1'), 'p44', None),
            (('p44', 'p3'), 'p45', 'p2'),
            (('p45', 'p1'), 'p46', None),
            (('p46', 'p6'), 'p47', 'p5'),
            (('p47', 'p6'), 'p48', 'p5'),
            (('p48', 'p3'), 'p49', 'p2'),
            (('p49', 'p1'), 'p50', None),
            (('p50', 'p3'), 'p51', 'p2'),
            (('p51', 'p4'), 'p52', 'p3'),
            (('p52', 'p1'), 'p53', None),
            (('p53', 'p5'), 'p54', 'p4'),
            (('p54', 'p4'), 'p55', 'p3'),
            (('p55', 'p6'), 'p56', 'p5'),
            (('p56', 'p1'), 'p57', None),
            (('p57', 'p4'), 'p58', 'p3'),
            (('p58', 'p3'), 'p59', 'p2'),
            (('p59', 'p1'), 'p60', None),
            (('p60', 'p5'), 'p61', 'p4'),
            (('p61', 'p7'), 'p62', 'p6'),
            (('p62', 'p3'), 'p63', 'p2'),
            (('p63', 'p1'), 'p64', None),
            (('p64', 'p3'), 'p65', 'p2'),
            (('p65', 'p7'), 'p66', 'p6'),
            (('p66', 'p4'), 'p67', 'p3'),
            (('p67', 'p5'), 'p68', 'p4'),
            (('p68', 'p1'), 'p69', None),
            (('p69', 'p3'), 'p70', 'p2'),
            (('p70', 'p4'), 'p71', 'p3'),
            (('p71', 'p5'), 'p72', 'p4'),
            (('p72', 'p4'), 'p73', 'p3'),
            (('p73', 'p4'), 'p74', 'p3'),
            (('p74', 'p3'), 'p75', 'p2'),
            (('p75', 'p4'), 'p76', 'p3'),
            (('p76', 'p5'), 'p77', 'p4'),
            (('p77', 'p3'), 'p78', 'p2'),
            (('p78', 'p5'), 'p79', 'p4'),
            (('p79', 'p5'), 'p80', 'p4'),
            (('p80', 'p1'), 'p81', None),
            (('p81', 'p5'), 'p82', 'p4'),
            (('p82', 'p1'), 'p83', None),
            (('p83', 'p4'), 'p84', 'p3'),
            (('p84', 'p3'), 'p85', 'p2'),
            (('p85', 'p4'), 'p86', 'p3'),
            (('p86', 'p5'), 'p87', 'p4'),
            (('p87', 'p3'), 'p88', 'p2'),
            (('p88', 'p1'), 'p89', None),
            (('p89', 'p3'), 'p90', 'p2'),
            (('p90', 'p6'), 'p91', 'p5'),
            (('p91', 'p5'), 'p92', 'p4'),
            (('p92', 'p3'), 'p93', 'p2'),
            (('p93', 'p5'), 'p94', 'p4'),
            (('p94', 'p3'), 'p95', 'p2'),
            (('p95', 'p4'), 'p96', 'p3'),
            (('p96', 'p6'), 'p97', 'p5'),
            (('p97', 'p1'), 'p98', None),
            (('p98', 'p8'), 'p99', 'p7'),
            (('p99', 'p4'), 'p100', 'p3'),
            (('p100', 'p5'), 'p101', 'p4'),
            (('p101', 'p4'), 'p102', 'p3'),
            (('p102', 'p4'), 'p103', 'p3'),
            (('p103', 'p1'), 'p104', None),
            (('p104', 'p4'), 'p105', 'p3'),
            (('p105', 'p5'), 'p106', 'p4'),
            (('p106', 'p4'), 'p107', 'p3'),
            (('p107', 'p4'), 'p108', 'p3'),
            (('p108', 'p1'), 'p109', None),
            (('p109', 'p4'), 'p110', 'p3'),
            (('p110', 'p4'), 'p111', 'p3'),
            (('p111', 'p3'), 'p112', 'p2'),
            (('p112', 'p1'), 'p113', None),
            (('p113', 'p6'), 'p114', 'p5'),
            (('p114', 'p5'), 'p115', 'p4'),
            (('p115', 'p1'), 'p116', None),
            (('p116', 'p3'), 'p117', 'p2'),
            (('p117', 'p4'), 'p118', 'p3'),
            (('p118', 'p4'), 'p119', 'p3'),
            (('p119', 'p1'), 'p120', None),
            (('p120', 'p6'), 'p121', 'p5'),
            (('p121', 'p3'), 'p122', 'p2'),
            (('p122', 'p4'), 'p123', 'p3'),
            (('p123', 'p5'), 'p124', 'p4'),
            (('p124', 'p5'), 'p125', 'p4'),
            (('p125', 'p5'), 'p126', 'p4'),
            (('p126', 'p5'), 'p127', 'p4'),
            (('p127', 'p5'), 'p128', 'p4'),
            (('p128', 'p4'), 'p129', 'p3'),
            (('p129', 'p4'), 'p130', 'p3'),
            (('p130', 'p3'), 'p131', 'p2'),
            (('p131', 'p5'), 'p132', 'p4'),
            (('p132', 'p4'), 'p133', 'p3'),
            (('p133', 'p3'), 'p134', 'p2'),
            (('p134', 'p5'), 'p135', 'p4'),
            (('p135', 'p3'), 'p136', 'p2'),
            (('p136', 'p7'), 'p137', 'p6'),
            (('p137', 'p5'), 'p138', 'p4'),
            (('p138', 'p6'), 'p139', 'p5'),
            (('p139', 'p1'), 'p140', None),
            (('p140', 'p5'), 'p141', 'p4'),
            (('p141', 'p1'), 'p142', None),
            (('p142', 'p3'), 'p143', 'p2'),
            (('p143', 'p1'), 'p144', None),
            (('p144', 'p5'), 'p145', 'p4'),
            (('p145', 'p7'), 'p146', 'p6'),
            (('p146', 'p3'), 'p147', 'p2'),
            (('p147', 'p1'), 'p148', None),
            (('p148', 'p3'), 'p149', 'p2'),
            (('p149', 'p7'), 'p150', 'p6'),
            (('p150', 'p3'), 'p151', 'p2'),
            (('p151', 'p1'), 'p152', None),
            (('p152', 'p3'), 'p153', 'p2'),
            (('p153', 'p9'), 'p154', 'p8'),
            (('p154', 'p3'), 'p155', 'p2'),
            (('p155', 'p5'), 'p156', 'p4'),
            (('p156', 'p5'), 'p157', 'p4'),
            (('p157', 'p5'), 'p158', 'p4'),
            (('p158', 'p3'), 'p159', 'p2'),
            (('p159', 'p4'), 'p160', 'p3'),
            (('p160', 'p4'), 'p161', 'p3'),
            (('p161', 'p7'), 'p162', 'p6'),
            (('p162', 'p3'), 'p163', 'p2'),
            (('p163', 'p4'), 'p164', 'p3'),
            (('p164', 'p4'), 'p165', 'p3'),
            (('p165', 'p5'), 'p166', 'p4'),
            (('p166', 'p4'), 'p167', 'p3'),
            (('p167', 'p6'), 'p168', 'p5'),
            (('p168', 'p3'), 'p169', 'p2'),
            (('p169', 'p4'), 'p170', 'p3'),
            (('p170', 'p1'), 'p171', None),
            (('p171', 'p5'), 'p172', 'p4'),
            (('p172', 'p1'), 'p173', None),
            (('p173', 'p4'), 'p174', 'p3'),
            (('p174', 'p5'), 'p175', 'p4'),
            (('p175', 'p1'), 'p176', None),
            (('p176', 'p5'), 'p177', 'p4'),
            (('p177', 'p1'), 'p178', None),
            (('p178', 'p4'), 'p179', 'p3'),
            (('p179', 'p8'), 'p180', 'p7'),
            (('p180', 'p3'), 'p181', 'p2'),
            (('p181', 'p1'), 'p182', None),
            (('p182', 'p3'), 'p183', 'p2'),
            (('p183', 'p4'), 'p184', 'p3'),
            (('p184', 'p4'), 'p185', 'p3'),
            (('p185', 'p5'), 'p186', 'p4'),
            (('p186', 'p4'), 'p187', 'p3'),
            (('p187', 'p4'), 'p188', 'p3'),
            (('p188', 'p9'), 'p189', 'p8'),
            (('p189', 'p1'), 'p190', None),
            (('p190', 'p5'), 'p191', 'p4'),
            (('p191', 'p5'), 'p192', 'p4'),
            (('p192', 'p5'), 'p193', 'p4'),
            (('p193', 'p4'), 'p194', 'p3'),
            (('p194', 'p4'), 'p195', 'p3'),
            (('p195', 'p5'), 'p196', 'p4'),
            (('p196', 'p6'), 'p197', 'p5'),
            (('p197', 'p3'), 'p198', 'p2'),
            (('p198', 'p4'), 'p199', 'p3'),
            (('p199', 'p4'), 'p200', 'p3')
        ]

    # Calculate Gaussian weights centered around a specific rule
    # for example iron or Fe-56
    center_rule_index = 30 

    # Set gaussian spread; adjust as needed
    spread = 20  

    # Total number of rules used
    num_rules = len(fusion_rules)

    # Random fusion weighted by gaussian curve 1= no weighting
    weights = np.exp(-0.5 * ((np.arange(num_rules) - center_rule_index) / spread) ** 2)

    # Normalize weights to sum to 1
    weights /= np.sum(weights)  

    # Track number of successful fusion steps
    fusion_step_count = 0  

    def attempt_weighted_random_fusion():
        nonlocal fusion_step_count
        rule_index = random.choices(range(num_rules), weights=weights, k=1)[0]
        rule = fusion_rules[rule_index]
        (prime_a, prime_b), result, remainder = rule
        # Check if fusion is possible with available inventory
        if fusion_counts[prime_a] > 0 and fusion_counts[prime_b] > 0:
            # Perform fusion if both primes are available
            fusion_counts[prime_a] -= 1
            fusion_counts[prime_b] -= 1
            fusion_counts[result] += 1
            if remainder:
                fusion_counts[remainder] += 1
            fusion_step_count += 1

            if fusion_step_count % 10000 == 0:
                print(f"{fusion_step_count:,} fusion steps")
            return True  # Fusion was successful
        return False  # Fusion was not possible

    # Main loop to reach the target number of fusion steps
    while fusion_step_count < step_count:
        # Attempt random fusion, only add p1 if fusion was successful
        if not attempt_weighted_random_fusion():
            # Do nothing when fusion fails
            continue
        else:
            # Add new p1 to inventory each time a fusion succeeds
            fusion_counts["p1"] += 1

        # Optionally print inventory at each step for debugging purposes
        #print(f"After step {fusion_step_count}, Inventory: {fusion_counts}")

    # Display final distribution of primes
    final_distribution = {name: fusion_counts[name] for name in fusion_counts if fusion_counts[name] > 0}
    print(f"\nFinal Prime Distribution after {step_count} fusion steps")
    print(f"Total fusion steps: {fusion_step_count}")
    return final_distribution


# Define primes up to p200
primes = {
    "p1": 2, "p2": 3, "p3": 5, "p4": 7, "p5": 11, "p6": 13, "p7": 17,
    "p8": 19, "p9": 23, "p10": 29, "p11": 31, "p12": 37, "p13": 41, "p14": 43,
    "p15": 47, "p16": 53, "p17": 59, "p18": 61, "p19": 67, "p20": 71, "p21": 73,
    "p22": 79, "p23": 83, "p24": 89, "p25": 97, "p26": 101, "p27": 103, "p28": 107,
    "p29": 109, "p30": 113, "p31": 127, "p32": 131, "p33": 137, "p34": 139, "p35": 149,
    "p36": 151, "p37": 157, "p38": 163, "p39": 167, "p40": 173, "p41": 179, "p42": 181,
    "p43": 191, "p44": 193, "p45": 197, "p46": 199, "p47": 211, "p48": 223, "p49": 227,
    "p50": 229, "p51": 233, "p52": 239, "p53": 241, "p54": 251, "p55": 257, "p56": 269,
    "p57": 271, "p58": 277, "p59": 281, "p60": 283, "p61": 293, "p62": 307, "p63": 311,
    "p64": 313, "p65": 317, "p66": 331, "p67": 337, "p68": 347, "p69": 349, "p70": 353,
    "p71": 359, "p72": 367, "p73": 373, "p74": 379, "p75": 383, "p76": 389, "p77": 397,
    "p78": 401, "p79": 409, "p80": 419, "p81": 421, "p82": 431, "p83": 433, "p84": 439,
    "p85": 443, "p86": 449, "p87": 457, "p88": 461, "p89": 463, "p90": 467, "p91": 479,
    "p92": 487, "p93": 491, "p94": 499, "p95": 503, "p96": 509, "p97": 521, "p98": 523,
    "p99": 541, "p100": 547, "p101": 557, "p102": 563, "p103": 569, "p104": 571,
    "p105": 577, "p106": 587, "p107": 593, "p108": 599, "p109": 601, "p110": 607,
    "p111": 613, "p112": 617, "p113": 619, "p114": 631, "p115": 641, "p116": 643,
    "p117": 647, "p118": 653, "p119": 659, "p120": 661, "p121": 673, "p122": 677,
    "p123": 683, "p124": 691, "p125": 701, "p126": 709, "p127": 719, "p128": 727,
    "p129": 733, "p130": 739, "p131": 743, "p132": 751, "p133": 757, "p134": 761,
    "p135": 769, "p136": 773, "p137": 787, "p138": 797, "p139": 809, "p140": 811,
    "p141": 821, "p142": 823, "p143": 827, "p144": 829, "p145": 839, "p146": 853,
    "p147": 857, "p148": 859, "p149": 863, "p150": 877, "p151": 881, "p152": 883,
    "p153": 887, "p154": 907, "p155": 911, "p156": 919, "p157": 929, "p158": 937,
    "p159": 941, "p160": 947, "p161": 953, "p162": 967, "p163": 971, "p164": 977,
    "p165": 983, "p166": 991, "p167": 997, "p168": 1009, "p169": 1013, "p170": 1019,
    "p171": 1021, "p172": 1031, "p173": 1033, "p174": 1039, "p175": 1049, "p176": 1051,
    "p177": 1061, "p178": 1063, "p179": 1069, "p180": 1087, "p181": 1091, "p182": 1093,
    "p183": 1097, "p184": 1103, "p185": 1109, "p186": 1117, "p187": 1123, "p188": 1129,
    "p189": 1151, "p190": 1153, "p191": 1163, "p192": 1171, "p193": 1181, "p194": 1187,
    "p195": 1193, "p196": 1201, "p197": 1213, "p198": 1217, "p199": 1223, "p200": 1229
}


# Example usage
# Define your number of fusion steps
step_count = 100000  
p1 = 0
distribution = stochastic_prime_fusion(step_count, primes)
for prime_name, count in distribution.items():
    print(f"{prime_name} ({primes[prime_name]}): {count}")